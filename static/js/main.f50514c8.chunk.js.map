{"version":3,"sources":["components/home/weather.jsx","App.js","serviceWorker.js","index.js"],"names":["Weather","props","state","lat","long","locationErr","weather","getWeather","bind","setLocation","this","fetchLocation","navigator","geolocation","getCurrentPosition","setState","position","coords","latitude","longitude","url","axios","get","then","resp","city","data","location","name","temp","current","temp_c","condition","text","isDay","is_day","returnStr","err","console","log","Button","id","variant","size","onClick","React","Component","App","className","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8VAsFeA,G,wDA9Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,IAAK,GACLC,KAAM,GACNC,YAAa,GACbC,QAAS,IAGX,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,YAAc,EAAKA,YAAYD,KAAjB,gBAVF,E,gEAcM,KAAnBE,KAAKR,MAAMC,KACbO,KAAKC,kB,sCAKHC,UAAUC,YACZD,UAAUC,YAAYC,mBAAmBJ,KAAKD,aAE9CC,KAAKK,SAAS,CAAEV,YAAa,oD,kCAIrBW,GACV,IAAMb,EAAMa,EAASC,OAAOC,SACtBd,EAAOY,EAASC,OAAOE,UAC7BT,KAAKK,SAAS,CAAEZ,IAAKA,EAAKC,KAAMA,M,mCAGpB,IAAD,OACLgB,EAAG,0FAAsFV,KAAKR,MAAMC,IAAjG,YAAwGO,KAAKR,MAAME,MAC5HiB,IAAMC,IAAIF,GACPG,MACC,SAACC,GACC,IAAMC,EAAOD,EAAKE,KAAKC,SAASC,KAC1BC,EAAOL,EAAKE,KAAKI,QAAQC,OACzBC,EAAYR,EAAKE,KAAKI,QAAQE,UAAUC,KACxCC,EAAQV,EAAKE,KAAKI,QAAQK,OAC1BC,EAAS,UAAMF,EAAQ,QAAU,UAAxB,eAAwCT,EAAxC,eAAmDO,EAAnD,kCAAsFH,GACrG,EAAKd,SAAS,CAAET,QAAS8B,OAE3B,SAACC,GACCC,QAAQC,IAAI,mBAAoBF,Q,+BAMtC,OACE,6BACE,kBAACG,EAAA,EAAD,CACEC,GAAG,cACHC,QAAQ,UACRC,KAAK,KACLC,QAASlC,KAAKH,YAJhB,eAUyB,KAAvBG,KAAKR,MAAMI,SACT,uBAAGmC,GAAG,kBAAN,YAAiC/B,KAAKR,MAAMI,SAInB,KAA3BI,KAAKR,MAAMG,aACT,uBAAGoC,GAAG,kBAAkB/B,KAAKR,MAAMG,kB,GAvEzBwC,IAAMC,Y,YCSbC,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,sEAEF,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOvB,SAASwB,UAEe,UAA7BD,OAAOvB,SAASwB,UAEhBD,OAAOvB,SAASwB,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmB7C,WACrBA,UAAU8C,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.f50514c8.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport './styles/weather.css';\r\n\r\nclass Weather extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lat: '',\r\n      long: '',\r\n      locationErr: '',\r\n      weather: ''\r\n    }\r\n\r\n    this.getWeather = this.getWeather.bind(this);\r\n    this.setLocation = this.setLocation.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (this.state.lat === '') {\r\n      this.fetchLocation();\r\n    }\r\n  }\r\n\r\n  fetchLocation() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(this.setLocation);\r\n    } else {\r\n      this.setState({ locationErr: 'Geolocation is not supported by this browser.' })\r\n    }\r\n  }\r\n\r\n  setLocation(position) {\r\n    const lat = position.coords.latitude;\r\n    const long = position.coords.longitude;\r\n    this.setState({ lat: lat, long: long })\r\n  }\r\n\r\n  getWeather() {\r\n    const url = `https://api.weatherapi.com/v1/current.json?key=5ade581cfb2449c780a14308201104&q=${this.state.lat},${this.state.long}`;\r\n    axios.get(url)\r\n      .then(\r\n        (resp) => {\r\n          const city = resp.data.location.name;\r\n          const temp = resp.data.current.temp_c;\r\n          const condition = resp.data.current.condition.text;\r\n          const isDay = resp.data.current.is_day;\r\n          const returnStr = `${isDay ? 'Today' : 'Tonight'} in ${city} is ${condition} with a temperature of ${temp}`;\r\n          this.setState({ weather: returnStr });\r\n        },\r\n        (err) => {\r\n          console.log('Error occurred: ', err)\r\n        }\r\n      )\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button\r\n          id=\"get-weather\"\r\n          variant=\"primary\"\r\n          size=\"lg\"\r\n          onClick={this.getWeather}\r\n        >\r\n          Get Weather\r\n        </Button>\r\n\r\n        {\r\n          this.state.weather !== '' && (\r\n            <p id=\"location-value\">Weather: {this.state.weather}</p>\r\n          )\r\n        }\r\n        {\r\n          this.state.locationErr !== '' && (\r\n            <p id=\"location-error\">{this.state.locationErr}</p>\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Weather","import React from 'react';\nimport Weather from './components/home/weather';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <p>What's the weather like where you are?</p>\n      </header>\n      <Weather />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}